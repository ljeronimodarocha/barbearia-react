[{"/barbearia-react/src/index.jsx":"1","/barbearia-react/src/App.jsx":"2","/barbearia-react/src/component/login/Login.jsx":"3","/barbearia-react/src/component/header/Header.jsx":"4","/barbearia-react/src/component/cadastro-usuario/Formulario-usuario.jsx":"5","/barbearia-react/src/component/logout/Logout.jsx":"6","/barbearia-react/src/component/lista-agendamentos/ListaAgendamentos.jsx":"7","/barbearia-react/src/component/horarioFuncionamento/FormulariohorarioFuncionamento.jsx":"8","/barbearia-react/src/component/tiposAgendamento/FormularioTipos.jsx":"9","/barbearia-react/src/api/usuario.js":"10","/barbearia-react/src/api/agendamento.js":"11","/barbearia-react/src/api/horarios.js":"12","/barbearia-react/src/api/tipo.js":"13","/barbearia-react/src/component/FormularioAgendamento/FormularioAgendamento.jsx":"14"},{"size":230,"mtime":1611093530869,"results":"15","hashOfConfig":"16"},{"size":2865,"mtime":1615655137834,"results":"17","hashOfConfig":"16"},{"size":2250,"mtime":1616798057839,"results":"18","hashOfConfig":"16"},{"size":1127,"mtime":1616797911602,"results":"19","hashOfConfig":"16"},{"size":3191,"mtime":1615247271821,"results":"20","hashOfConfig":"16"},{"size":476,"mtime":1615591053777,"results":"21","hashOfConfig":"16"},{"size":2948,"mtime":1620089797251,"results":"22","hashOfConfig":"16"},{"size":4098,"mtime":1619564649663,"results":"23","hashOfConfig":"16"},{"size":3706,"mtime":1619564827424,"results":"24","hashOfConfig":"16"},{"size":984,"mtime":1616798017166,"results":"25","hashOfConfig":"16"},{"size":901,"mtime":1619998753889,"results":"26","hashOfConfig":"16"},{"size":718,"mtime":1616723432936,"results":"27","hashOfConfig":"16"},{"size":766,"mtime":1615664330369,"results":"28","hashOfConfig":"16"},{"size":3844,"mtime":1620089446583,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1w4o26a",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},"/barbearia-react/src/index.jsx",[],["62","63"],"/barbearia-react/src/App.jsx",[],"/barbearia-react/src/component/login/Login.jsx",[],"/barbearia-react/src/component/header/Header.jsx",[],"/barbearia-react/src/component/cadastro-usuario/Formulario-usuario.jsx",[],"/barbearia-react/src/component/logout/Logout.jsx",[],"/barbearia-react/src/component/lista-agendamentos/ListaAgendamentos.jsx",[],"/barbearia-react/src/component/horarioFuncionamento/FormulariohorarioFuncionamento.jsx",["64"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Container, Button } from '@material-ui/core';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport './estilo.css';\r\nimport Horarios from '../../api/horarios';\r\n\r\nfunction FormulariohorarioFuncionamento(props) {\r\n    const [lista, setLista] = useState('');\r\n    const [erros, setErros] = useState('');\r\n    const [dataInicial, setDataInicial] = useState('');\r\n    const [dataFinal, setDataFinal] = useState('');\r\n    const horarios = new Horarios();\r\n    const columns = [\r\n        {\r\n            width: 250, field: 'dataInicial', headerName: 'Inicial',\r\n            valueGetter: (date) => new Date(date.value).toLocaleString('pt-BR', {timeZone:\"UTC\"}),\r\n        },\r\n        {\r\n            field: 'dataFinal',\r\n            headerName: 'Final',\r\n            width: 250,\r\n            valueGetter: (date) => new Date(date.value).toLocaleString('pt-BR', {timeZone:\"UTC\"}),\r\n\r\n        },\r\n    ]\r\n    const adicionarHorario = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            // const resposta = await horarios.cadastraHorarios(`${dataInicial}:00`.replaceAll('T', ' '),\r\n            //     `${dataFinal}:00`.replaceAll('T', ' '));\r\n            await horarios.cadastraHorarios(dataInicial, dataFinal);\r\n            await listaHorarios();\r\n            setDataInicial('');\r\n            setDataFinal('');\r\n            setErros('');\r\n        } catch (error) {\r\n            if (error.response) {\r\n                setErros(error.response.data);\r\n                if (error.response.status === 401) {\r\n                    sessionStorage.clear();\r\n                    props.logadoChange();\r\n                }\r\n            } else if (error.request) {\r\n                setErros(error.request);\r\n            } else {\r\n                setErros(error);\r\n            }\r\n        }\r\n    }\r\n    const listaHorarios = async () => {\r\n        try {\r\n            const resposta = await horarios.listaHorarios();\r\n            setLista(resposta.data);\r\n        } catch (error) {\r\n            if (error.response) {\r\n                setErros(error.response.data);\r\n                if (error.response.status === 401) {\r\n                    sessionStorage.clear();\r\n                    props.logadoChange();\r\n                }\r\n            } else if (error.request) {\r\n                setErros(error.request);\r\n\r\n            } else {\r\n                setErros(error);\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        async function mostraDados() {\r\n            await listaHorarios();\r\n        }\r\n        mostraDados();\r\n    }, []\r\n    )\r\n    const a = [];\r\n\r\n    for (const key in erros) {\r\n        a.push(erros[key]);\r\n    }\r\n    return (\r\n        <Container maxWidth=\"sm\">\r\n            {erros !== '' &&\r\n                a.map((value) => {\r\n                    return (\r\n                        <><Alert severity=\"error\">{value}</Alert></>\r\n                    );\r\n                })\r\n            }\r\n            <form action=\"\" onSubmit={e => { adicionarHorario(e) }}>\r\n                <div className=\"formularioHorarios\">\r\n                    <TextField id=\"dataInicial\" label=\"Inicial\" type=\"datetime-local\" InputLabelProps={{\r\n                        shrink: true,\r\n                    }} value={dataInicial} onChange={e => setDataInicial(e.target.value)} />\r\n\r\n                    <TextField id=\"dataFinal\" label=\"Final\" type=\"datetime-local\" InputLabelProps={{\r\n                        shrink: true,\r\n                    }} value={dataFinal} onChange={e => setDataFinal(e.target.value)} />\r\n                </div>\r\n\r\n                <Button type=\"submit\" className=\"btn-cadastrar\" variant=\"contained\" color=\"primary\">\r\n                    Cadastrar\r\n                </Button>\r\n            </form>\r\n            {lista !== '' &&\r\n                <div className=\"tabela\">\r\n                    <DataGrid rows={lista} columns={columns} autoHeight />\r\n                </div>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default FormulariohorarioFuncionamento;","/barbearia-react/src/component/tiposAgendamento/FormularioTipos.jsx",["65"],"import React, { useState, useEffect } from 'react';\r\nimport Tipo from '../../api/tipo';\r\nimport { TextField, Container, Box, Button } from '@material-ui/core';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport './FormularioTipos.css';\r\n\r\n\r\nfunction FormularioTipos(props) {\r\n    const [nome, setNome] = useState(\"\");\r\n    const [tempo, setTempo] = useState(0);\r\n    const [erros, setErros] = useState('');\r\n    const [tipos, setTipos] = useState('');\r\n    const tipo = new Tipo();\r\n    const columns = [\r\n        { width: 200, field: 'nome', headerName: 'Corte', },\r\n        {\r\n\r\n            field: 'tempo',\r\n            headerName: 'Horas',\r\n            valueGetter: (date) => {\r\n                var hours = Math.floor(date.value / 60);\r\n                var minutes = date.value % 60;\r\n                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\r\n            },\r\n        },\r\n    ]\r\n    const enviarFormulario = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            await tipo.cadastrar(nome, tempo);\r\n            listaTipos();\r\n            setNome('');\r\n            setTempo('');\r\n            setErros('');\r\n        } catch (error) {\r\n            if (error.response) {\r\n                setErros(error.response.data);\r\n                if (error.response.status === 401) {\r\n                    sessionStorage.clear();\r\n                    props.logadoChange();\r\n                }\r\n            } else if (error.request) {\r\n                setErros(error.request);\r\n            } else {\r\n                setErros(error);\r\n            }\r\n        }\r\n        setNome(\"\");\r\n        setTempo(0);\r\n    }\r\n    const listaTipos = async () => {\r\n        try {\r\n            const lista = await tipo.listar();\r\n            setTipos(lista.data);\r\n        } catch (error) {\r\n            if (error.response) {\r\n                setErros(error.response.data);\r\n                if (error.response.status === 401) {\r\n                    sessionStorage.clear();\r\n                    props.logadoChange();\r\n                }\r\n            } else if (error.request) {\r\n                setErros(error.request);\r\n\r\n            } else {\r\n                setErros(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function lista() {\r\n            await listaTipos();\r\n        }\r\n        lista();\r\n    }, [])\r\n    const a = [];\r\n    for (const key in erros) {\r\n        a.push(erros[key])\r\n    }\r\n    return (\r\n        <Container maxWidth=\"sm\">\r\n            {erros !== '' &&\r\n                a.map((value) => {\r\n                    return (\r\n\r\n                        <><Alert severity=\"error\">{value}</Alert></>\r\n                    );\r\n                })\r\n            }\r\n\r\n            <form action=\"\" onSubmit={e => { enviarFormulario(e) }}>\r\n                <Box className=\"caixas\">\r\n                    <TextField id=\"Nome\" fullWidth label=\"Tipo\" value={nome} type=\"text\" variant=\"outlined\" onChange={e => setNome(e.target.value)} />\r\n                </Box>\r\n                <Box className=\"caixas\">\r\n                    <TextField id=\"Tempo\" fullWidth label=\"Tempo\" value={tempo} type=\"number\" variant=\"outlined\" onChange={e => setTempo(e.target.value)} />\r\n                </Box>\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                    Cadastrar\r\n                </Button>\r\n            </form>\r\n            {tipos !== '' &&\r\n                <div className=\"tabela\">\r\n                    <DataGrid rows={tipos} columns={columns} autoHeight />\r\n                </div>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\nexport default FormularioTipos;","/barbearia-react/src/api/usuario.js",[],"/barbearia-react/src/api/agendamento.js",[],"/barbearia-react/src/api/horarios.js",[],"/barbearia-react/src/api/tipo.js",[],"/barbearia-react/src/component/FormularioAgendamento/FormularioAgendamento.jsx",["66","67"],"import React, { useEffect, useState } from 'react';\r\nimport { Container, TextField } from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Tipo from '../../api/tipo';\r\nimport Agendamento from '../../api/agendamento'\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport './estilo.css';\r\n\r\nfunction FormularioAgendamento(props) {\r\n    const [dataInicial, setDataInicial] = useState('');\r\n    const [tipos, setTipos] = useState([]);\r\n    const [erros, setErros] = useState([]);\r\n    const [corte, setCorte] = useState('');\r\n\r\n    const tipo = new Tipo();\r\n    const agendamento = new Agendamento()\r\n    const listaTipos = async () => {\r\n        try {\r\n            const resultado = await tipo.listar();\r\n            setTipos(resultado.data);\r\n        } catch (error) {\r\n            if (error.response) {\r\n                setErros(error.response.data);\r\n                if (error.response.status === 401) {\r\n                    sessionStorage.clear();\r\n                    props.logadoChange();\r\n                }\r\n            } else if (error.request) {\r\n                setErros(error.request);\r\n\r\n            } else {\r\n                setErros(error);\r\n            }\r\n        }\r\n    }\r\n    \r\n    const enviar = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const resultado = await agendamento.cadastrar(dataInicial.replace('T', ' '), corte);\r\n            props.updateList();\r\n        } catch (error) {\r\n            if (error.response) {\r\n                if (error.response.status === 401) {\r\n                    setErros(error.response.data);\r\n                    sessionStorage.clear();\r\n                    props.logadoChange();\r\n                }\r\n            } else if (error.request) {\r\n                setErros(error.request);\r\n            } else {\r\n                setErros(error);\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        listaTipos();\r\n    }, [])\r\n\r\n\r\n    const a = [];\r\n\r\n    for (const key in erros) {\r\n        a.push(erros[key]);\r\n    }\r\n    return (\r\n        <Container maxWidth=\"sm\">\r\n            {erros !== '' &&\r\n                a.map((value) => {\r\n                    return (\r\n                        <><Alert severity=\"error\">{value}</Alert></>\r\n                    );\r\n                })\r\n            }\r\n            <form action=\"\" onSubmit={e => { enviar(e) }}>\r\n                <div className=\"formularioHorarios\">\r\n                    <TextField id=\"dataInicial\" label=\"Inicial\" type=\"datetime-local\" InputLabelProps={{\r\n                        shrink: true,\r\n                    }} value={dataInicial} onChange={e => setDataInicial(e.target.value)} />\r\n                    <FormControl className=\"formControl\">\r\n                        <InputLabel id=\"corte\">Selecione um corte</InputLabel>\r\n                        <Select\r\n                            labelId=\"corte\"\r\n                            id=\"corte\"\r\n                            value={corte}\r\n                            onChange={event => { setCorte(event.target.value) }}\r\n                        >\r\n                            {tipos.map((tipo) => {\r\n                                return <MenuItem key={tipo.id} value={tipo.id}>{tipo.nome}</MenuItem>\r\n                            })}\r\n                        </Select>\r\n                    </FormControl >\r\n                    <Button variant=\"contained\" type=\"submit\" className=\"btnAdicionar\" color=\"primary\">\r\n                        Adicionar\r\n                    </Button>\r\n                </div>\r\n\r\n            </form>\r\n\r\n        </Container >\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default FormularioAgendamento;",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":75,"column":8,"nodeType":"74","endLine":75,"endColumn":10,"suggestions":"75"},{"ruleId":"72","severity":1,"message":"76","line":77,"column":8,"nodeType":"74","endLine":77,"endColumn":10,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":44,"column":19,"nodeType":"80","messageId":"81","endLine":44,"endColumn":28},{"ruleId":"72","severity":1,"message":"76","line":62,"column":8,"nodeType":"74","endLine":62,"endColumn":10,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'listaHorarios'. Either include it or remove the dependency array.","ArrayExpression",["85"],"React Hook useEffect has a missing dependency: 'listaTipos'. Either include it or remove the dependency array.",["86"],"no-unused-vars","'resultado' is assigned a value but never used.","Identifier","unusedVar",["87"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"90","fix":"92"},"Update the dependencies array to be: [listaHorarios]",{"range":"93","text":"94"},"Update the dependencies array to be: [listaTipos]",{"range":"95","text":"96"},{"range":"97","text":"96"},[2654,2656],"[listaHorarios]",[2420,2422],"[listaTipos]",[2151,2153]]